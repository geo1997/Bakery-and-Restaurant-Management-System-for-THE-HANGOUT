package Employee.Report_emp;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import Employee.PermEmpSal.EmpSal;
import Employee.EmpDetails.EmDet;
import Employee.Emp_leaves.EmpLeaves;
import Employee.Dashboard.EmployeeManagement;
import Employee.TempEmpSal.TempEmpSal;
import Hangout.Home.Home;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.RefineryUtilities;

//import ui.Home;

/**
 *
 * @author BEYOND
 */
public class chart extends javax.swing.JFrame {

    /**
     * Creates new form MenuManagement
     */
    public chart() {
        initComponents();
        jPanel1.setBackground(new Color(255, 102, 0, 180));
        jPanel2.setBackground(new Color(0, 0, 0, 150));
        jLabel1.setBackground(new Color(0, 0, 0, 100));
        //jPanel3.setBackground(new Color(255,102,0,180));
        //jPanel3.setBackground(new Color(255, 102, 0, 180));
        jPanel4.setBackground(new Color(255, 102, 0, 180));
       
        jButton6.setBackground(new Color(255, 102, 0, 180));
        jButton7.setBackground(Color.WHITE);
        
        optioncombo.setBackground(new Color(255, 102, 0, 180));
        emptypecombo.setBackground(new Color(255, 102, 0, 180));

       
        //jTextField7.setBackground(new Color(255, 102, 0, 180));
   
        

    

        this.setExtendedState(MAXIMIZED_BOTH);
        
        
         logout_btn.setBackground(new Color(255, 102, 0, 180));
        
     
         
         
    }

      public Connection getConnection(){
        Connection conn = null;
        
        String db = "hangout";
        String url = "jdbc:mysql://localhost:3306/"+db;
        String username = "root";
        String password = "root";
        
        try {
            conn = DriverManager.getConnection(url,username,password);
            return conn;
        } catch (SQLException e) {
            return null;
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        logout_btn = new javax.swing.JButton();
        userwelcomejlabel = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        optioncombo = new javax.swing.JComboBox<>();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        emptypecombo = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(1920, 100));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Logo.png"))); // NOI18N
        jLabel2.setToolTipText("");

        jLabel9.setFont(new java.awt.Font("Chiller", 1, 60)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Employee Management");

        logout_btn.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        logout_btn.setText("Log Out");
        logout_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btnActionPerformed(evt);
            }
        });

        userwelcomejlabel.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        userwelcomejlabel.setForeground(new java.awt.Color(255, 255, 255));

        jButton7.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton7.setText("Yearly Reports");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton6.setText("Monthly Reports");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(527, 527, 527)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 565, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(208, 208, 208)
                                .addComponent(userwelcomejlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(558, 558, 558)
                                .addComponent(logout_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addComponent(userwelcomejlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(logout_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(33, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel8.setText("Yearly Report");

        jPanel4.setPreferredSize(new java.awt.Dimension(1408, 500));

        jButton1.setText("Generate Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        optioncombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Salary", "Leaves", "Attendance" }));
        optioncombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optioncomboActionPerformed(evt);
            }
        });

        emptypecombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Permanent", "Temporary" }));
        emptypecombo.setEnabled(false);
        emptypecombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emptypecomboActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel19.setText("Select Year");

        jLabel20.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel20.setText("Select Option");

        jLabel21.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel21.setText("Select Employee Type");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(321, 321, 321)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 223, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emptypecombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(optioncombo, 0, 198, Short.MAX_VALUE))))
                .addGap(323, 323, 323))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(jLabel17)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(469, 469, 469)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(52, 52, 52)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(65, 65, 65)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(optioncombo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)))
                    .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel21)
                        .addGap(132, 132, 132))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emptypecombo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)))
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(271, 271, 271))
        );

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(240, 240, 240));
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(843, 843, 843))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(302, 302, 302))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(194, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1920, 1090);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -10, 1960, 1110);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btnActionPerformed

        Home h = new Home();
        h.setVisible(true);
        this.setVisible(false);

        //JOptionPane.showMessageDialog(null, "You have successfully Log out");
    }//GEN-LAST:event_logout_btnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:

            
//        DefaultPieDataset pie = new DefaultPieDataset();
//        pie.setValue("One", new Integer(10));
//        pie.setValue("Two", new Integer(20));
//        pie.setValue("Three", new Integer(30));
//        pie.setValue("Four", new Integer(40));
//       
//        JFreeChart chart =ChartFactory.createPieChart("Pie Chart", pie);
//         PiePlot P = (PiePlot)chart.getPlot();
//        
//         ChartPanel chartPanel= new ChartPanel(chart);
//         
//         jPanel5.removeAll();
//         jPanel5.add(chartPanel);
//         jPanel5.updateUI();
        String year=String.valueOf(jYearChooser1.getYear());
         

        if(optioncombo.getSelectedItem().equals("Salary"))
        {
        String emptype=String.valueOf(emptypecombo.getSelectedItem());
        final chart demo = new chart("Salary Analysis Year "+year,year,emptype);
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);
        repaint();
        }
        else
        if(optioncombo.getSelectedItem().equals("Leaves")){
            final chart demo = new chart("Leave Analysis Year "+year,year);
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);
        repaint();
        }
          else
        if(optioncombo.getSelectedItem().equals("Attendance")){
       
            attendance(year);
            
        repaint();
        } 
        
      
        
        } catch (SQLException ex) {
            Logger.getLogger(chart.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void optioncomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optioncomboActionPerformed
        // TODO add your handling code here:
        
         // TODO add your handling code here:
        repaint();
        if(optioncombo.getSelectedItem().equals("Salary")){
            emptypecombo.setEnabled(true);
        }
        else
         if(optioncombo.getSelectedItem().equals("Leaves")){
              emptypecombo.setEnabled(false);
         }
        else
         if(optioncombo.getSelectedItem().equals("Attendance")){
              emptypecombo.setEnabled(false);
         }
        
    }//GEN-LAST:event_optioncomboActionPerformed

    private void emptypecomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emptypecomboActionPerformed
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_emptypecomboActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        EmployeeManagamentDash_Reports rep = new EmployeeManagamentDash_Reports();
        rep.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Report_emp rep = new Report_emp();
        rep.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

   
    public chart(final String title,final String year,final String emptype) throws SQLException {

        super(title);
        
       
        final CategoryDataset dataset1 = createDataset1(year,emptype);

        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Salary Analysis -"+emptype+" Year "+year,        // chart title
            "Department",               // domain axis label
            "Salary",                  // range axis label
            dataset1,                 // data
            PlotOrientation.VERTICAL,
            true,                     // include legend
            true,                     // tooltips?
            false                     // URL generator?  Not required...
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);
//        chart.getLegend().setAnchor(Legend.SOUTH);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new Color(0xEE, 0xEE, 0xFF));
        plot.setDomainAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);

     

//        final CategoryAxis domainAxis = plot.getDomainAxis();
//        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
//        final ValueAxis axis2 = new NumberAxis("Secondary");
//        plot.setRangeAxis(1, axis2);

        final LineAndShapeRenderer renderer2 = new LineAndShapeRenderer();
        renderer2.setToolTipGenerator(new StandardCategoryToolTipGenerator());
        plot.setRenderer(1, renderer2);
        plot.setDatasetRenderingOrder(DatasetRenderingOrder.REVERSE);
        // OPTIONAL CUSTOMISATION COMPLETED.

        // add the chart to a panel...
        final ChartPanel chartPanel = new ChartPanel(chart);
       chartPanel.setPreferredSize(new java.awt.Dimension(700, 470));
        setContentPane(chartPanel);

    }
    
    
    
 private CategoryDataset createDataset1(String year,String emptype) throws SQLException {

       
      //System.out.println(year);
         PreparedStatement ps;
            ResultSet rs;
             Connection conn = getConnection();
            
             
             
        // row keys...
        final String series1 = "Salay Summation";
        final String series2 = "Highest Salary";
     
      
        
        

        // column keys...
        final String category1 = "Restaurant and Bakery";
        final String category2 = "Raw material & Utility Management";
        final String category3 = "Catering & Order book";
        final String category4 = "Customer Management";
        final String category5 = "Finished products";
        final String category6 = "Function hall";
        final String category7 = "HRM";
       
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal "
                     + "from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='Restaurant and Bakery' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
              ps.setString(1, year);
             
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category1);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category1);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='Restaurant and Bakery' "
                     + "and year=?";
             
             ps = conn.prepareStatement(sql);
              ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category1);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category1);
                  
              }
             
        }
        
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='Raw material & Utility Management' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
              ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category2);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category2);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='Raw material & Utility Management' "
                     + "and year=? ";
             
             ps = conn.prepareStatement(sql);
              ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category2);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category2);
                  
              }
             
        }
        
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='Catering & Order book' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
             ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category3);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category3);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='Catering & Order book' "
                     + "and year=? ";
             
             ps = conn.prepareStatement(sql);
            ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category3);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category3);
                  
              }
             
        }
        
        
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='Customer Management' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
              ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category4);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category4);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='Customer Management' "
                     + "and year=? ";
             
             ps = conn.prepareStatement(sql);
             ps.setString(1, year);
             
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category4);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category4);
                  
              }
             
        }
        
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='Finished products' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
             ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category5);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category5);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='Finished products' "
                     + "and year=? ";
             
             ps = conn.prepareStatement(sql);
              ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category5);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category5);
                  
              }
             
        }
        
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='Function hall' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
             ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category6);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category6);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='Function hall' "
                     + "and year=? ";
             
             ps = conn.prepareStatement(sql);
          ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category6);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category6);
                  
              }
             
        }
       
        if("Permanent".equals(emptype)){
            
             String sql="Select sum(Distinct(pemp.basicSalary))as TotalSal,max(pemp.basicSalary)as HighestSal from employee e,permanentemp pemp where e.id=pemp.peid and "
                     + "department='HRM' "
                     + "and year=? ";
             
              ps = conn.prepareStatement(sql);
             ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category7);
                  
                   Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category7);
                   
              }
              
              
            
        }else 
         if("Temporary".equals(emptype)){
             
             String sql="Select sum(Distinct(totalSal))as TotalSal,max(totalSal) as HighestSal from employee e,tempemployee temp where e.id=temp.teid and "
                     + "department='HRM' "
                     + "and year=? ";
             
             ps = conn.prepareStatement(sql);
          ps.setString(1, year);
              
              rs=ps.executeQuery();
              
              if(rs.next()){
                  Double TotalSal = rs.getDouble("TotalSal");
                    dataset.addValue(TotalSal, series1, category7);
                    
                    Double highestSal = rs.getDouble("HighestSal");
                    dataset.addValue(highestSal, series2, category7);
                  
              }
             
        }
            
           
           
        

      
    



        return dataset;

    }
 
     public chart(final String title,final String year) throws SQLException {

        super(title);
        
       
        final CategoryDataset dataset1 = createDataset2(year);

        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Leave Analysis Year "+year,        // chart title
            "Department",               // domain axis label
            "Leaves",                  // range axis label
            dataset1,                 // data
            PlotOrientation.VERTICAL,
            true,                     // include legend
            true,                     // tooltips?
            false                     // URL generator?  Not required...
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);
//        chart.getLegend().setAnchor(Legend.SOUTH);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new Color(0xEE, 0xEE, 0xFF));
        plot.setDomainAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);

     

//        final CategoryAxis domainAxis = plot.getDomainAxis();
//        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
//        final ValueAxis axis2 = new NumberAxis("Secondary");
//        plot.setRangeAxis(1, axis2);

        final LineAndShapeRenderer renderer2 = new LineAndShapeRenderer();
        renderer2.setToolTipGenerator(new StandardCategoryToolTipGenerator());
        plot.setRenderer(1, renderer2);
        plot.setDatasetRenderingOrder(DatasetRenderingOrder.REVERSE);
        // OPTIONAL CUSTOMISATION COMPLETED.

        // add the chart to a panel...
        final ChartPanel chartPanel = new ChartPanel(chart);
       chartPanel.setPreferredSize(new java.awt.Dimension(700, 470));
        setContentPane(chartPanel);

    }
    
     private CategoryDataset createDataset2(final String year) throws SQLException {

       
      //System.out.println(year);
         PreparedStatement ps1,ps2;
            ResultSet rs1,rs2;
             Connection conn = getConnection();
            
        // row keys...
        final String series1 = "Full Day";
        final String series2 = "Half Day";
     
      

        // column keys...
        final String category1 = "Restaurant and Bakery";
        final String category2 = "Raw material & Utility Management";
        final String category3 = "Catering & Order book";
        final String category4 = "Customer Management";
        final String category5 = "Finished products";
        final String category6 = "Function hall";
        final String category7 = "HRM";
       
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
       
             String full="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Restaurant and Bakery' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String half="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Restaurant and Bakery' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(full);
              ps2 = conn.prepareStatement(half);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category1);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category1);
              }
              
              
              
             String fullRaw="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Raw material & Utility Management' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String halfRaw="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Raw material & Utility Management' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(fullRaw);
              ps2 = conn.prepareStatement(halfRaw);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category2);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category2);
              }
  
       
        
               String fullCat="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Catering & Order book' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String halfCat="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Catering & Order book' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(fullCat);
              ps2 = conn.prepareStatement(halfCat);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category3);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category3);
              }
           
             String fullCusMan="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Customer Management' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String halfCusMan="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Customer Management' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(fullCusMan);
              ps2 = conn.prepareStatement(halfCusMan);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category4);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category4);
              }
        

        String fullFinis="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Finished products' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String halfFinis="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Finished products' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(fullFinis);
              ps2 = conn.prepareStatement(halfFinis);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category5);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category5);
              }
    

               String fullFunc="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Function hall' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String halfFunc="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='Function hall' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(fullFunc);
              ps2 = conn.prepareStatement(halfFunc);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category6);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category6);
              }

              
               String fullHRM="Select count(Distinct(leave_id))as FullLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='HRM' and el.leave_type='Full Day' "
                     + "and year(el.leave_date)=? ";
             
             
             String halfHRM="Select count(Distinct(leave_id))as HalfLeaves "
                     + "from employee e inner join permanentleave permempl on e.id=permempl.pempid inner join empleaves el on permempl.leave_id= el.leaveid "
                     + "where e.department='HRM' and el.leave_type='Half Day' "
                     + "and year(el.leave_date)=? ";
             
              ps1 = conn.prepareStatement(fullHRM);
              ps2 = conn.prepareStatement(halfHRM);
              
              ps1.setString(1, year);
              ps2.setString(1, year);
              
              rs1=ps1.executeQuery();
               rs2=ps2.executeQuery();
              
              if(rs1.next()){
                  int fullleaves = rs1.getInt("FullLeaves");
                    dataset.addValue(fullleaves, series1, category7);
                       
                   
              }
              if(rs2.next()){
                  int halfleaves = rs2.getInt("HalfLeaves");
                  
                  dataset.addValue(halfleaves, series2, category7);
              }
              

        return dataset;

    }

 
     public void attendance(String year){
         
        try {
            PreparedStatement ps;
            ResultSet rs;
            
            Connection conn = getConnection();
            
            final String category1 = "Restaurant and Bakery";
            final String category2 = "Raw material & Utility Management";
            final String category3 = "Catering & Order book";
            final String category4 = "Customer Management";
            final String category5 = "Finished products";
            final String category6 = "Function hall";
            final String category7 = "HRM";
            
            
            
            if(emptypecombo.equals("Permanent")){
                
                
            }
            String Res = "Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'Restaurant and Bakery' "
                    + "and year(a.presentdate)=? ";
            
            String Raw = "Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'Raw material & Utility Management' "
                    + "and year(a.presentdate)=? ";
            
            String Catering = "Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'Catering & Order book' "
                    + "and year(a.presentdate)=? ";
            
            
            String cus="Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'Customer Management' "
                    + "and year(a.presentdate)=? ";
            
            String Finished="Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'Finished products' "
                    + "and year(a.presentdate)=? ";
            
            String Function="Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'Function hall' "
                    + "and year(a.presentdate)=? ";
            
            String HRM="Select count(Distinct(a.presentdate)) as atd_count "
                    + "from attendance a, employee e "
                    + "where e.id=a.atd_eid and e.department= 'HRM' "
                    + "and year(a.presentdate)=? ";
            
            
            
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            ps= conn.prepareStatement(Res);
            ps.setString(1, year);
            
            rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(new Integer(res), "Values", category1);
                
            }
            
            
            ps = conn.prepareStatement(Raw);
            ps.setString(1, year);
            
             rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(res, "Values", category2);
                
            }
            
                ps = conn.prepareStatement(Catering);
            ps.setString(1, year);
            
             rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(res, "Values", category3);
                
            }
            
                ps = conn.prepareStatement(cus);
            ps.setString(1, year);
            
             rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(res, "Values", category4);
                
            }
            
                ps = conn.prepareStatement(Finished);
            ps.setString(1, year);
            
             rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(res, "Values", category5);
                
            }
            
                ps = conn.prepareStatement(Function);
            ps.setString(1, year);
            
             rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(res, "Values", category6);
                
            }
            
            
                ps = conn.prepareStatement(HRM);
            ps.setString(1, year);
            
             rs=ps.executeQuery();
            
            if(rs.next()){
                int res = rs.getInt("atd_count");
                dataset.setValue(res, "Values", category7);
                
            }
            
            
            
            JFreeChart chart = ChartFactory.createBarChart3D("Attendance Analysis Year "+year,"Department","Values",dataset,PlotOrientation.VERTICAL,false,true,false);
            chart.setBackgroundPaint(Color.WHITE);
            chart.getTitle().setPaint(Color.ORANGE);
            CategoryPlot p =chart.getCategoryPlot();
            p.setRangeGridlinePaint(Color.BLUE);
            ChartFrame frame  = new ChartFrame("Attendance Report",chart);
            frame.setVisible(true);
            RefineryUtilities.centerFrameOnScreen(frame);
            frame.setSize(450,350);
            
            
            
            
            
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(chart.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         
     }
     
     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> emptypecombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JButton logout_btn;
    private javax.swing.JComboBox<String> optioncombo;
    public static javax.swing.JLabel userwelcomejlabel;
    // End of variables declaration//GEN-END:variables
static public class HeaderColor extends DefaultTableCellRenderer {

        public HeaderColor() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable jTable1, Object value, boolean selected, boolean foused, int row, int column) {
            super.getTableCellRendererComponent(jTable1, value, selected, foused, row, column);
            setBackground(new java.awt.Color(255, 102, 0, 180));
            setFont(new Font("Calibri", Font.BOLD, 20));

            return this;
        }

    }

}
