package Employee.Report_emp;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import Employee.Attendance.Attendance;
import Employee.EmpDetails.EmDet;
import Employee.PermEmpSal.EmpSal;
import Employee.Emp_leaves.EmpLeaves;
import Employee.Dashboard.EmployeeManagement;
import Employee.TempEmpSal.TempEmpSal;
import Hangout.Home.Home;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.print.PrinterException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.spi.CalendarDataProvider;
import javax.swing.JOptionPane;

import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
//import ui.Home;

/**
 *
 * @author BEYOND
 */
public class Report_emp extends javax.swing.JFrame {

    /**
     * Creates new form MenuManagement
     */
    public Report_emp() {
        initComponents();
        jPanel1.setBackground(new Color(255, 102, 0, 180));
        jPanel2.setBackground(new Color(0, 0, 0, 150));
        jLabel1.setBackground(new Color(0, 0, 0, 100));
        //jPanel3.setBackground(new Color(255,102,0,180));
        //jPanel3.setBackground(new Color(255, 102, 0, 180));
        jPanel4.setBackground(new Color(255, 102, 0, 180));
        jPanel5.setBackground(new Color(255, 102, 0, 180));

       
        jButton7.setBackground(new Color(255, 102, 0, 180));
        jButton6.setBackground(Color.WHITE);
       
         logout_btn.setBackground(new Color(255, 102, 0, 180));
        
        jTable1.getTableHeader().setDefaultRenderer(new HeaderColor());

        this.setExtendedState(MAXIMIZED_BOTH);
        
        
        //jTextPane1.insertComponent(jLabel4);
       
      
       
    }

    
   
    
       public Connection getConnection(){
        Connection conn = null;
        
        String db = "hangout";
        String url = "jdbc:mysql://localhost:3306/"+db;
        String username = "root";
        String password = "root";
        
        try {
            conn = DriverManager.getConnection(url,username,password);
            return conn;
        } catch (SQLException e) {
            return null;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        logout_btn = new javax.swing.JButton();
        userwelcomejlabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        depCombo = new javax.swing.JComboBox<>();
        optioncombo = new javax.swing.JComboBox<>();
        report_btn = new javax.swing.JButton();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jSpinner1 = new javax.swing.JSpinner();
        emptypecombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextPane();
        print = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(1920, 100));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Logo.png"))); // NOI18N
        jLabel2.setToolTipText("");

        jButton6.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton6.setText("Monthly Reports");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jButton7.setText("Yearly Reports");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Chiller", 1, 60)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Employee Management");

        logout_btn.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        logout_btn.setText("Log Out");
        logout_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btnActionPerformed(evt);
            }
        });

        userwelcomejlabel.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        userwelcomejlabel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(585, 585, 585)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(622, 622, 622)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 404, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logout_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(userwelcomejlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)))
                        .addGap(122, 122, 122))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(userwelcomejlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(logout_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel8.setText("Monthly Reports");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Last Name"
            }
        ));
        jTable1.setRowHeight(40);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        depCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Restaurant and Bakery", "Raw material & Utility Management", "Catering & Order book", "Customer Management", "Finished products", "Function hall", "HRM" }));
        depCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depComboActionPerformed(evt);
            }
        });

        optioncombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Attendance", "Leaves", "Salary" }));
        optioncombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optioncomboActionPerformed(evt);
            }
        });

        report_btn.setBackground(new java.awt.Color(0, 0, 0));
        report_btn.setForeground(new java.awt.Color(240, 240, 240));
        report_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8_report_file_30px_2.png"))); // NOI18N
        report_btn.setText("Generate Report");
        report_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_btnActionPerformed(evt);
            }
        });

        jMonthChooser1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jMonthChooser1FocusLost(evt);
            }
        });
        jMonthChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMonthChooser1MouseClicked(evt);
            }
        });
        jMonthChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jMonthChooser1PropertyChange(evt);
            }
        });
        jMonthChooser1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMonthChooser1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jMonthChooser1KeyReleased(evt);
            }
        });

        jSpinner1.setEnabled(false);

        emptypecombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Permanent", "Temporary", " " }));
        emptypecombo.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(depCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(emptypecombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(103, 103, 103)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(optioncombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(report_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optioncombo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(emptypecombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(report_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(240, 240, 240));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jScrollPane2.setViewportView(jTextArea1);

        print.setBackground(new java.awt.Color(0, 0, 0));
        print.setForeground(new java.awt.Color(240, 240, 240));
        print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8_print_30px.png"))); // NOI18N
        print.setText("Print Report");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 922, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(407, 407, 407))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel8)))
                .addGap(51, 51, 51))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel8)))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1920, 1090);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -10, 1960, 1110);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        chart ch = new chart();
        ch.setVisible(true);
        this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        EmployeeManagamentDash_Reports rep = new EmployeeManagamentDash_Reports();
        rep.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void logout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btnActionPerformed

        Home h = new Home();
        h.setVisible(true);
        this.setVisible(false);

        //JOptionPane.showMessageDialog(null, "You have successfully Log out");
    }//GEN-LAST:event_logout_btnActionPerformed

    private void depComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depComboActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        fillClientJtable(jTable1);
        repaint();

    }//GEN-LAST:event_depComboActionPerformed

    private void optioncomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optioncomboActionPerformed
        // TODO add your handling code here:
        repaint();
        if(optioncombo.getSelectedItem().equals("Leaves")){
            jSpinner1.setEnabled(false);
        }else
            if(optioncombo.getSelectedItem().equals("Attendance")){
                 jSpinner1.setEnabled(true);
                 ((SpinnerNumberModel) jSpinner1.getModel()).setMinimum(0);
            }
        else
             if(optioncombo.getSelectedItem().equals("Salary")){
                 emptypecombo.setEnabled(true);
             }   
        
    }//GEN-LAST:event_optioncomboActionPerformed


//    
    private void report_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_btnActionPerformed
        // TODO add your handling code here:
         
        // ImageIcon im = new ImageIcon("Logo.png");
//        JLabel label = new JLabel();
//        label.setIcon(new ImageIcon("Logo.png"));
//        jTextArea1.insertComponent(label);
        
        //String title="The Hangout";
//        ImageIcon im = new ImageIcon("Logo.png");
//        JLabel il = new JLabel();
//        il.setIcon(im);
//        jTextArea1.insertComponent(il);
//        StyledDocument doc = (StyledDocument)jTextArea1.getDocument();
//        Style style  = doc.addStyle("", null);
//        StyleConstants.setIcon(style, new ImageIcon("Logo.png"));
//        jTextArea1.insertIcon(new ImageIcon("Logo.png"));
//        
       // jTextArea1.insertComponent(new ImageIcon("Logo.png"));
//        jTextArea1.setFont(new Font("Arial Black", Font.BOLD, 15));
//        
//      
        jTextArea1.setText("                                                                                 The Hangout                       \n");
         String month=String.valueOf((jMonthChooser1.getMonth()+1));
         
        
        
         
         
        
         
         //System.out.println(month);
          String year=String.valueOf(jYearChooser1.getYear());
         String dep=depCombo.getSelectedItem().toString();
         String option=optioncombo.getSelectedItem().toString();
         jTextArea1.setFont(new Font("Arial Black", Font.BOLD, 11));
         
            jTextArea1.setText(jTextArea1.getText()+"\n                                                                         Employee Report "+option+      " \n");
             jTextArea1.setText(jTextArea1.getText()+"\n                                                             Department of "+dep+      " \n");
                   jTextArea1.setText(jTextArea1.getText()+"\n                                                                                  Month "+month+     "\n\n\n\n\n");          

           PreparedStatement ps;
            ResultSet rs;
//            
            if(optioncombo.getSelectedItem().equals("Leaves")){

        
                
           jTextArea1.setText(jTextArea1.getText()+"                             ID                                     Employee Name                                   Number of Leaves \n\n");
                 
            int rowcount=jTable1.getRowCount();
                      
            
           for(int i=0;i<rowcount;i++){
         
            
               
                String id = String.valueOf(jTable1.getValueAt(i,0));
                int eid = Integer.parseInt(id);
             
             
          
            try {
                String sql="select e.id,concat(e.fname,' ',e.lname)as Name,l.noofleaves from leavecount l, employee e "
                        + "where l.eid=e.id and e.department =? and l.month=? and l.year=? and e.id=? ";
                //System.out.println(month);
                
                Connection con = getConnection();
                ps=con.prepareStatement(sql);
                
                ps.setString(1, dep);
                ps.setString(2, month);
                ps.setString(3, year);
                ps.setInt(4, eid);
                
                
                rs=ps.executeQuery();
                
               
                
                if(rs.next()){
                    String empid=rs.getString("id");
                    jTextArea1.setText(jTextArea1.getText()+"                             "+empid+"                                   ");
                    
                    String name = rs.getString("Name");
                     jTextArea1.setText(jTextArea1.getText()+name+"                                            ");
                     
                     int leavcount = rs.getInt("noofleaves");
                      jTextArea1.setText(jTextArea1.getText()+leavcount+" \n");
                    
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Report_emp.class.getName()).log(Level.SEVERE, null, ex);
            }
           }
          
         }else
            if(optioncombo.getSelectedItem().equals("Attendance")){
                
                String val=String.valueOf(jSpinner1.getValue());
                
                  //System.out.println(val);  
                  jTextArea1.setText(jTextArea1.getText()+"             ID                 Employee Name                   Present Days                     Absent Days                     Working Days \n\n");
                  
                  
                  
                   int rowcount=jTable1.getRowCount();
                   
               for(int i=0;i<rowcount;i++){
         
                
            
               
                String id = String.valueOf(jTable1.getValueAt(i,0));
                int eid = Integer.parseInt(id);
             
             
          
            try {
                String sql="select e.id,concat(e.fname,' ',e.lname)as Name,count(Distinct(attenid))as presentcount from attendance a right outer join employee e on a.atd_eid=e.id   "
                        + "where  a.atten ='present' and e.department =? and month(a.presentdate)=? and year(a.presentdate)=? and e.id=? group by e.id";
               
                
                Connection con = getConnection();
                ps=con.prepareStatement(sql);
                
                ps.setString(1, dep);
                ps.setString(2, month);
                ps.setString(3, year);
                ps.setInt(4, eid);
                
                
                rs=ps.executeQuery();
                
               
                
                if(rs.next()){
                    String empid=rs.getString("id");
                    jTextArea1.setText(jTextArea1.getText()+"             "+empid+"                ");
                    
                    String name = rs.getString("Name");
                     jTextArea1.setText(jTextArea1.getText()+name+"                      ");
                     
                     int presentdays=rs.getInt("presentcount");
                     jTextArea1.setText(jTextArea1.getText()+"  "+presentdays+"                                   ");
                     
                     int absentdays=Integer.parseInt(val)-presentdays;
                     System.out.println(absentdays); 
                     
                     //int lea = rs.getInt("absentcount");
                      jTextArea1.setText(jTextArea1.getText()+absentdays+"                                     ");
                    
                       jTextArea1.setText(jTextArea1.getText()+val+"                 \n");
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Report_emp.class.getName()).log(Level.SEVERE, null, ex);
            }
           }
                   
            }else
             if(optioncombo.getSelectedItem().equals("Salary")){
                if(emptypecombo.getSelectedItem().equals("Permanent")){
                     
                     jTextArea1.setText(jTextArea1.getText()+"     ID            Employee Name             Basic Salary           Bonus         Overtime            EPF           ETF          Net Salary\n\n");    
                     int rowcount=jTable1.getRowCount();
                   
                     for(int i=0;i<rowcount;i++){
         
                         
                             String id = String.valueOf(jTable1.getValueAt(i,0));
                             int eid = Integer.parseInt(id);
                             
                          try {   
                             String sql = "select e.id,concat(e.fname,' ',e.lname)as Name,p.basicSalary,p.bonus,p.ot,p.epf,p.etf,p.netSal from employee e,permanentemp p where p.peid = e.id and "
                                     + "e.department =? and p.month=? and p.year=? and e.id=? ";
                             
                             Connection con = getConnection();
                             ps=con.prepareStatement(sql);
                             
                             ps.setString(1, dep);
                             ps.setString(2, month);;
                             ps.setString(3, year);;
                             ps.setInt(4, eid);
                           
                             
                             rs=ps.executeQuery();
                             
                
               
                
                            if(rs.next()){
                            String empid=rs.getString("id");
                            jTextArea1.setText(jTextArea1.getText()+"     "+empid+"        ");
                               
                            String name = rs.getString("Name");
                            jTextArea1.setText(jTextArea1.getText()+                name+"              ");
                            
                            String basicSal = rs.getString("basicSalary");
                            jTextArea1.setText(jTextArea1.getText()+basicSal+"               ");
                            
                            String bonus = rs.getString("bonus");
                            jTextArea1.setText(jTextArea1.getText()+bonus+"         ");
                            
                            String ot = rs.getString("ot");
                            jTextArea1.setText(jTextArea1.getText()+ot+"           ");
                            
                            String epf = rs.getString("epf");
                            jTextArea1.setText(jTextArea1.getText()+epf+"        ");
                            
                            String etf = rs.getString("etf");
                            jTextArea1.setText(jTextArea1.getText()+etf+"        ");
                            
                            String netSal = rs.getString("netSal");
                            jTextArea1.setText(jTextArea1.getText()+netSal);
                                 
                            }
                         } catch (SQLException ex) {
                             Logger.getLogger(Report_emp.class.getName()).log(Level.SEVERE, null, ex);
                         }
                 }
                 
               }
                
                else
                {
                    jTextArea1.setText(jTextArea1.getText()+"            ID                         Employee Name                     Hourly Rate                  Hours                   Net Salary\n\n");    
                     int rowcount=jTable1.getRowCount();
                   
                     for(int i=0;i<rowcount;i++){
         
                         
                             String id = String.valueOf(jTable1.getValueAt(i,0));
                             int eid = Integer.parseInt(id);
                             
                          try {   
                             String sql = "select e.id,concat(e.fname,' ',e.lname)as Name,t.hours,t.otRate,t.totalSal from employee e,tempemployee t where t.teid = e.id and "
                                     + "e.department =? and t.month=? and t.year=? and e.id=? ";
                             
                             Connection con = getConnection();
                             ps=con.prepareStatement(sql);
                             
                             ps.setString(1, dep);
                             ps.setString(2, month);;
                             ps.setString(3, year);;
                             ps.setInt(4, eid);
                           
                             
                             rs=ps.executeQuery();
                             
                
               
                
                            if(rs.next()){
                            String empid=rs.getString("id");
                            jTextArea1.setText(jTextArea1.getText()+"            "+empid+"                      ");
                               
                            String name = rs.getString("Name");
                            jTextArea1.setText(jTextArea1.getText()+name+"                      ");
                            
                            String rate = rs.getString("otRate");
                            jTextArea1.setText(jTextArea1.getText()+rate+"                       ");
                            
                            String hours = rs.getString("hours");
                            jTextArea1.setText(jTextArea1.getText()+hours+"                     ");
                            
                                                        
                            String tot = rs.getString("totalSal");
                            jTextArea1.setText(jTextArea1.getText()+tot+"                          \n");
                            
                                 
                            }
                         } catch (SQLException ex) {
                             Logger.getLogger(Report_emp.class.getName()).log(Level.SEVERE, null, ex);
                         }
                 }
                }
            }

    }//GEN-LAST:event_report_btnActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        
         String year=String.valueOf(jYearChooser1.getYear());
              
          jTextArea1.setText("                                                                          The Hangout                       \n");
          
          
          
          jTextArea1.setFont(new Font("Arial Black", Font.BOLD, 12));
         
            jTextArea1.setText(jTextArea1.getText()+"\n                                                               Employee Individual Report "+      " \n");
            jTextArea1.setText(jTextArea1.getText()+"\n                                                                           Year "+year+     "\n\n\n\n\n");          

                     

        
        try {
            // TODO add your handling code here:
             //String year=String.valueOf(jYearChooser1.getYear());
             ResultSet rs;
            
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            int index = jTable1.getSelectedRow();
            
            String Table_click=(model.getValueAt(index, 0).toString());
            
            String sql="Select type from employee where id=?";
            
            Connection conn = getConnection();
            PreparedStatement ps = conn.prepareStatement(sql);
            
            ps.setString(1, Table_click);
            
             rs=ps.executeQuery();
             
             
            if(rs.next()){
                if(rs.getString("type").equals("Permanent")){
                    
                    String per="Select e.id,concat(e.fname,' ',e.lname)as Name,e.nic,e.dob,e.type,e.gender,e.department,sum(distinct(basicSalary))as totSal,count(distinct(l.noofleaves))as totL "
                            + "from employee e inner join permanentemp pemp on e.id=pemp.peid inner join leavecount l on pemp.peid=l.eid "
                            + "where l.year=? and pemp.year=? and e.id=? "
                            + "group by e.id ";
                    
                    
                    
                      ps=conn.prepareStatement(per);
                      ps.setString(1, year);
                      ps.setString(2, year);
                      ps.setString(3, Table_click);
                     rs=ps.executeQuery();
                     
                     if(rs.next()){
                         
                            String empid=rs.getString("id");
                            jTextArea1.setText(jTextArea1.getText()+"                                                                 Employee ID  : "+empid+"                      \n\n\n\n");
                               
                            String name = rs.getString("Name");
                            jTextArea1.setText(jTextArea1.getText()+"       Employee Name : "+name+"                      ");
                            
                            String nic = rs.getString("nic");
                            jTextArea1.setText(jTextArea1.getText()+"              NIC No : "+nic+"                       \n\n");
                            
                            String dob = rs.getString("dob");
                            jTextArea1.setText(jTextArea1.getText()+"       Date of Birth : "+dob+"                     ");
                            
                              String type = rs.getString("type");
                            jTextArea1.setText(jTextArea1.getText()+"                             Employee Type : "+type+"                    \n\n");
                            
                              String gender = rs.getString("gender");
                            jTextArea1.setText(jTextArea1.getText()+"       Gender : "+gender+"                     ");
                            
                              String department = rs.getString("department");
                            jTextArea1.setText(jTextArea1.getText()+"                                           Department : "+department+" \n\n");
                                                        
                            String tot = rs.getString("totSal");
                            jTextArea1.setText(jTextArea1.getText()+"       Total Salary : "+tot+"                          ");
                            
                           String totL = rs.getString("totL");
                            jTextArea1.setText(jTextArea1.getText()+"                            Total Leaves : "+totL+"                     ");
                            System.out.println(totL);
                         
                     }
                     
                }else{
                    String per="Select e.id,concat(e.fname,' ',e.lname)as Name,e.nic,e.dob,e.type,e.gender,e.department,sum(Distinct(totalSal)) as totSal "
                            + "from employee e inner join tempemployee temp on e.id=temp.teid "
                            + "where  temp.year=? and e.id=? "
                            + "group by e.id ";
                    
                    
                    
                      
                      ps=conn.prepareStatement(per);
                      ps.setString(1, year);
                      ps.setString(2, Table_click);
                     rs=ps.executeQuery();
                     
                     
                     
                       
                     if(rs.next()){
                         
                         
                           String empid=rs.getString("id");
                            jTextArea1.setText(jTextArea1.getText()+"                                                                        Employee ID : "+empid+"                      \n\n\n\n");
                               
                            String name = rs.getString("Name");
                            jTextArea1.setText(jTextArea1.getText()+"                    Employee Name : "+name+"                      ");
                            
                            String nic = rs.getString("nic");
                            jTextArea1.setText(jTextArea1.getText()+"                NIC No : "+nic+"                       \n\n");
                            
                            String dob = rs.getString("dob");
                            jTextArea1.setText(jTextArea1.getText()+"                    Date of Birth : "+dob+"                     ");
                            
                              String type = rs.getString("type");
                            jTextArea1.setText(jTextArea1.getText()+"                      Employee Type : "+type+"                     \n\n");
                            
                              String gender = rs.getString("gender");
                            jTextArea1.setText(jTextArea1.getText()+"                    Gender : "+gender+"                     ");
                            
                              String department = rs.getString("department");
                            jTextArea1.setText(jTextArea1.getText()+"                                        Department : "+department+"                     \n\n");
                                                        
                            String tot = rs.getString("totSal");
                            jTextArea1.setText(jTextArea1.getText()+"                    Total Salary : "+tot+"                          ");
                            
                           
                         
                     }
                    
                }
            }
            
            
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Report_emp.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
           
            
        
        
    }//GEN-LAST:event_jTable1MousePressed

    private void jMonthChooser1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMonthChooser1MouseClicked
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMonthChooser1MouseClicked

    private void jMonthChooser1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMonthChooser1KeyPressed
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMonthChooser1KeyPressed

    private void jMonthChooser1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMonthChooser1KeyReleased
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMonthChooser1KeyReleased

    private void jMonthChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jMonthChooser1PropertyChange
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMonthChooser1PropertyChange

    private void jMonthChooser1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMonthChooser1FocusLost
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMonthChooser1FocusLost

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        try {
            // TODO add your handling code here:

            jTextArea1.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Report_emp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printActionPerformed

    
     public void fillClientJtable(JTable table){
    
    //String valToSearch=tfSearch.getText();
    PreparedStatement ps;
    ResultSet rs;
     Connection con = getConnection();
    if(depCombo.getSelectedItem().equals("Restaurant and Bakery")){
         String selectQuery = "Select id,fname,lname from employee where department = 'Restaurant and Bakery' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[6];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
     else
      if(depCombo.getSelectedItem().equals("Raw material & Utility Management")){
         String selectQuery = "Select id,fname,lname from employee where department = 'Raw material & Utility Management' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[6];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
                   
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
      else
       if(depCombo.getSelectedItem().equals("Catering & Order book")){
         String selectQuery = "Select id,fname,lname from employee  where department = 'Catering & Order book' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[6];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
      else
         if(depCombo.getSelectedItem().equals("Customer Management")){
         String selectQuery = "Select id,fname,lname from employee where department = 'Customer Management' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[6];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
     else
         if(depCombo.getSelectedItem().equals("Finished products")){
         String selectQuery = "Select id,fname,lname from employee  where department = 'Finished products' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[6];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
       
          else
         if(depCombo.getSelectedItem().equals("Function hall")){
         String selectQuery = "Select id,fname,lname  from employee  where department = 'Function hall' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[6];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
               
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
      else
         if(depCombo.getSelectedItem().equals("HRM")){
         String selectQuery = "Select id,fname,lname from employee  where department = 'HRM' ";
         try {
                    ps=con.prepareStatement(selectQuery);
                    rs=ps.executeQuery();
                    DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
                    Object[] row;
                    while(rs.next()){
                    row = new Object[7];
                    row[0]=rs.getInt(1);
                    row[1]=rs.getString(2);
                    row[2]=rs.getString(3);
                    
                    tableModel.addRow(row);
               }
            } catch (SQLException ex) {
            Logger.getLogger(EmpLeaves.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
       
      
 }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Report_emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Report_emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Report_emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Report_emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Report_emp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> depCombo;
    private javax.swing.JComboBox<String> emptypecombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextArea1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private javax.swing.JButton logout_btn;
    private javax.swing.JComboBox<String> optioncombo;
    private javax.swing.JButton print;
    private javax.swing.JButton report_btn;
    public static javax.swing.JLabel userwelcomejlabel;
    // End of variables declaration//GEN-END:variables
static public class HeaderColor extends DefaultTableCellRenderer {

        public HeaderColor() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable jTable1, Object value, boolean selected, boolean foused, int row, int column) {
            super.getTableCellRendererComponent(jTable1, value, selected, foused, row, column);
            setBackground(new java.awt.Color(255, 102, 0, 180));
            setFont(new Font("Calibri", Font.BOLD, 20));

            return this;
        }

    }

}
